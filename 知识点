Java运算符优先级口诀：单目乘除位关系，逻辑三目后赋值。

中序转前序算法：
1、反转输入字符串，如“2*3/(2-1)+3*(4-1)” 反转后为“ )1-4(*3+)1-2(/3*2”，
2、从字符串中取出下一个字符
　　2.1.如果是操作数，则直接输出
　　2.2.如果是“)”，压入栈中
　　2.3.如果是运算符但不是“(”，“)”,则不断循环进行以下处理
　　　　2.3.1.如果栈为空，则此运算符进栈，结束此步骤
　　　　2.3.2.如果栈顶是“)”,则此运算符进栈，结束此步骤
　　　　2.3.2.如果此运算符与栈顶优先级相同或者更高，此运算符进栈，结束此步骤
　　　　2.3.4.否则，运算符连续出栈输出，直到满足上述三个条件之一，然后此运算符进栈
　　2.4、如果是“(”，则运算符连续出栈输出，直到遇见“)”为止,将“)”出栈且丢弃之
3、如果还有更多的字符串，则转到第2步
4、不在有未处理的字符串了，输出栈中剩余元素
5、再次反转字符串得到最终结果

将中序表达式所有括号补全，然后将所有运算符向左移出无匹配的第一个左括号，去掉括号即为前序表式式
举例：
原式：a+b*(c+d/e)
补全括号：(a+(b*(c+(d/e))))
操作符右移：+(a*(b+(c/(de))))
去掉括号：+a*b+c/de

中序转后序算法：
1、当输入的是操作数时候，直接输出
2、当输入开括号时候，把它压栈
3、当输入的是闭括号时候，先判断栈是否为空，若为空，则发生错误并进行相关处理。若非空，把栈中元素依次出栈输出，直到遇到第一个开括号，若没有遇到开括号，也发生错误，进行相关处理
4、当输入是运算符op（+、-、*、/）时候
a)循环，当（栈非空and栈顶不是开括号and栈顶运算符的优先级不低于输入的运算符的优先级）时，反复操作：将栈顶元素出栈输出
b)把输入的运算符op压栈
5、当中序表达式的符号序列全部读入后，若栈内仍有元素，把他们依次出栈输出。若弹出的元素遇到空括号，则说明不匹配，发生错误，并进行相关处理
中序表达式转后序表式式：

将中序表达式所有括号补全，然后将所有运算符向右移出无匹配的第一个右括号，去掉括号即为后序表式式
举例：
原式：a+b*(c+d/e)
补全括号：(a+(b*(c+(d/e))))
操作符右移：(a(b(c(de)/)+)*)+
去掉括号：abcde/+*+
中序表达式转前序表式式：

